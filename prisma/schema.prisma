generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  name                String
  picture             String?
  provider            AuthProvider
  providerId          String
  accessToken         String
  refreshToken        String?
  tokenExpiry         DateTime?
  scope               String
  verifiedEmail       Boolean       @default(false)
  // Sync state fields for incremental sync
  gmailHistoryId      String? // Gmail's historyId for incremental sync
  outlookDeltaToken   String? // Outlook's delta token for incremental sync
  lastSyncTime        DateTime? // Last successful sync timestamp
  // Onboarding fields
  onboardingCompleted Boolean       @default(false)
  onboardingStep      Int           @default(1)
  fullName            String?
  signature           String?
  tone                String?
  pronouns            String?
  vipContacts         String? // JSON string array
  vipDomains          String? // JSON string array
  smartGroupName      String?
  smartGroupEmails    String? // JSON string array
  companyName         String?
  companySize         String?
  positionType        String?
  importantLabels     String? // JSON string array
  securityLabels      String? // JSON string array
  spamLabels          String? // JSON string array
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  emails              Email[]
  emailThreads        EmailThread[]

  @@unique([provider, providerId])
}

model EmailThread {
  id             String             @id @default(cuid())
  externalId     String
  subject        String
  sender         String
  senderEmail    String
  preview        String
  timestamp      DateTime
  isRead         Boolean            @default(false)
  isImportant    Boolean            @default(false)
  hasAttachments Boolean            @default(false)
  isLabeled      Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String
  emails         Email[]
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  labels         EmailThreadLabel[]

  @@unique([userId, externalId])
  @@index([userId, timestamp])
  @@index([userId, isLabeled])
}

model Email {
  id             String            @id @default(cuid())
  externalId     String
  threadId       String
  subject        String
  sender         String
  senderEmail    String
  recipient      String
  recipientEmail String
  timestamp      DateTime
  body           String
  htmlBody       String?
  isRead         Boolean           @default(false)
  isLabeled      Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String
  emailThreadId  String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailThread    EmailThread       @relation(fields: [emailThreadId], references: [id], onDelete: Cascade)
  labels         EmailLabel[]
  attachments    EmailAttachment[]

  @@unique([userId, externalId])
  @@index([userId, timestamp])
  @@index([userId, isLabeled])
  @@index([emailThreadId])
}

model EmailThreadLabel {
  id            String      @id @default(cuid())
  label         String
  createdAt     DateTime    @default(now())
  emailThreadId String
  emailThread   EmailThread @relation(fields: [emailThreadId], references: [id], onDelete: Cascade)

  @@unique([emailThreadId, label])
  @@index([emailThreadId])
}

model EmailLabel {
  id        String   @id @default(cuid())
  label     String
  createdAt DateTime @default(now())
  emailId   String
  email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@unique([emailId, label])
  @@index([emailId])
}

model EmailAttachment {
  id          String   @id @default(cuid())
  externalId  String // External attachment ID from Gmail/Outlook
  filename    String
  mimeType    String
  size        Int // Size in bytes
  downloadUrl String? // URL to download the attachment (if available)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  emailId     String
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@unique([emailId, externalId])
  @@index([emailId])
}

enum AuthProvider {
  GOOGLE
  OUTLOOK
}
