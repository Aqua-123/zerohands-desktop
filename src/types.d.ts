// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface OAuthTokens {
  access_token: string;
  refresh_token?: string;
  scope: string;
  token_type: string;
  expiry_date?: number;
}

interface GoogleUserInfo {
  id: string;
  email: string;
  name: string;
  picture?: string;
  verified_email: boolean;
}

interface EmailThread {
  id: string;
  subject: string;
  sender: string;
  senderEmail: string;
  preview: string;
  timestamp: Date;
  isRead: boolean;
  isImportant: boolean;
  hasAttachments: boolean;
  labels?: string[];
}

interface EmailMessage {
  id: string;
  threadId: string;
  subject: string;
  sender: string;
  senderEmail: string;
  recipient: string;
  recipientEmail: string;
  timestamp: Date;
  body: string;
  htmlBody?: string;
  attachments?: EmailAttachment[];
  isRead: boolean;
}

interface EmailAttachment {
  id: string;
  filename: string;
  mimeType: string;
  size: number;
  downloadUrl?: string;
}

interface OAuthContext {
  googleAuthenticate: () => Promise<{
    tokens: OAuthTokens;
    userInfo: GoogleUserInfo;
  }>;
  googleRefreshToken: (refreshToken: string) => Promise<OAuthTokens>;
  googleRevokeToken: (token: string) => Promise<void>;
  outlookAuthenticate: () => Promise<{
    tokens: OAuthTokens;
    userInfo: GoogleUserInfo;
  }>;
  outlookRefreshToken: (refreshToken: string) => Promise<OAuthTokens>;
  outlookRevokeToken: (token: string) => Promise<void>;
  onOAuthAuthenticated: (
    callback: (data: { tokens: OAuthTokens; userInfo: GoogleUserInfo }) => void,
  ) => void;
  onOAuthError: (callback: (error: string) => void) => void;
}

interface EmailContext {
  getInboxEmails: (
    userEmail: string,
    pageToken?: string,
    maxResults?: number,
  ) => Promise<{ emails: EmailThread[]; nextPageToken?: string }>;
  getEmailContent: (
    userEmail: string,
    messageId: string,
  ) => Promise<EmailMessage>;
  markEmailAsRead: (userEmail: string, messageId: string) => Promise<void>;
  sendEmail: (
    userEmail: string,
    to: string,
    subject: string,
    body: string,
    isHtml?: boolean,
  ) => Promise<void>;
  setupGmailPushNotifications: (userEmail: string) => Promise<void>;
  setupOutlookWebhook: (userEmail: string, webhookUrl: string) => Promise<void>;
  getInboxEmailsFromDB: (
    userEmail: string,
    limit?: number,
    offset?: number,
  ) => Promise<{ emails: EmailThread[]; hasMore: boolean }>;
  processAndLabelEmails: (
    userEmail: string,
    onEmailProcessed?: (email: EmailThread) => void,
  ) => Promise<void>;
  performIncrementalSync: (
    userEmail: string,
    maxResults?: number,
  ) => Promise<{ newEmailsCount: number; totalEmailsCount: number }>;
  onEmailError: (callback: (error: string) => void) => void;
  onNewEmailNotification: (
    callback: (data: { userEmail: string; newEmails: EmailThread[] }) => void,
  ) => void;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  oauth: OAuthContext;
  email: EmailContext;
}
